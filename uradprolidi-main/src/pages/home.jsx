import React, { useState, useEffect, useRef, useCallback } from 'react';
import FeedbackForm from '../components/FeedbackForm';
import { Link } from 'react-router-dom';
import Footer from '../components/Footer';
import { pdfToImages } from '../utils/pdfToImages';
import * as pdfjsLib from 'pdfjs-dist/build/pdf';
import { createWorker } from 'tesseract.js'; // Ensure createWorker is imported

// Configure PDF.js worker
pdfjsLib.GlobalWorkerOptions.workerSrc = `/pdfjs/pdf.worker.mjs`;

// Combined and corrected Home component
const Home = () => {
    // State related to general app functionality
    const [inputText, setInputText] = useState('');
    const [uploadedFileTextForApi, setUploadedFileTextForApi] = useState('');
    const [output, setOutput] = useState('');
    const [statusMessage, setStatusMessage] = useState('');
    const [consentChecked, setConsentChecked] = useState(false);
    const [gdprChecked, setGdprChecked] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [seconds, setSeconds] = useState(0);
    const [selectedType, setSelectedType] = useState(null);
    const [isTesseractReady, setIsTesseractReady] = useState(false); // <--- THIS MUST BE FALSE
    const [worker, setWorker] = useState(null); // <--- THIS MUST BE PRESENT

    // Refs for hidden file input elements
    const fileUploadRef = useRef(null);
    const cameraCaptureRef = useRef(null);

    // Effect to initialize Tesseract.js worker <--- THIS ENTIRE useEffect BLOCK IS CRUCIAL
    useEffect(() => {
        const loadTesseractWorker = async () => {
            setStatusMessage('Naƒç√≠t√°m OCR engine...');
            setIsTesseractReady(false); // Ensure false until fully ready
            console.log('Attempting to create Tesseract worker...');
            try {
                const newWorker = await createWorker({
                    logger: m => {
                        console.log('Tesseract Logger:', m);
                        if (m.status === 'recognizing text') {
                            setStatusMessage(`üì∑ Rozpozn√°v√°m text: ${Math.round(m.progress * 100)}%`);
                        } else if (m.status === 'loading tesseract core' || m.status === 'loading language traineddata') {
                            setStatusMessage(`Naƒç√≠t√°m OCR engine: ${m.status.replace('loading ', '').replace('tesseract core', 'j√°dro Tesseractu').replace('language traineddata', 'jazykov√° data')}... ${Math.round(m.progress * 100)}%`);
                        } else if (m.status === 'initializing tesseract') {
                            setStatusMessage('Inicializuji OCR engine...');
                        }
                    },
                    workerPath: '/tesseract-data/worker.min.js',
                    corePath: '/tesseract-data/tesseract-core.wasm.js',
                });

                console.log('Worker created, attempting to load...');
                await newWorker.load();
                console.log('Worker loaded, attempting to load language...');
                await newWorker.loadLanguage('eng');
                console.log('Language loaded, attempting to initialize...');
                await newWorker.initialize('eng');
                console.log('Tesseract worker fully initialized.');

                setWorker(newWorker);
                setIsTesseractReady(true);
                setStatusMessage('OCR engine p≈ôipraven.');
            } catch (error) {
                console.error('Failed to load Tesseract worker:', error);
                setStatusMessage('‚ùå Nepoda≈ôilo se naƒç√≠st OCR engine. Zkuste obnovit str√°nku.');
                setIsTesseractReady(false);
            }
        };

        loadTesseractWorker();

        // Cleanup function to terminate the worker when the component unmounts
        return () => {
            if (worker) {
                worker.terminate();
            }
        };
    }, []); // Empty dependency array ensures this runs once on mount

    // Function to convert File object to Base64 for OCR processing
    const convertFileToBase64 = (file) => {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = () => resolve(reader.result);
            reader.onerror = (error) => reject(error);
        });
    };

    // OCR function using the initialized Tesseract.js worker <--- MODIFIED runOCR
    const runOCR = async (imageBase64) => {
        if (!worker) { // Ensure the worker is initialized before attempting OCR
            console.error("Tesseract worker is not initialized.");
            setStatusMessage("‚ùå Tesseract engine se nenaƒçetl spr√°vnƒõ. Zkuste obnovit str√°nku.");
            return '';
        }
        try {
            setStatusMessage('üì∑ Spou≈°t√≠m rozpozn√°v√°n√≠ textu (OCR)...');
            const result = await worker.recognize(imageBase64); // <--- USE THE WORKER INSTANCE
            setStatusMessage('');
            return result.data.text;
        } catch (error) {
            console.error('OCR error:', error);
            setStatusMessage('‚ö†Ô∏è Nepoda≈ôilo se spustit OCR. Zkuste pros√≠m jin√Ω dokument nebo text.');
            return '';
        }
    };

    // Consolidated handler for all file uploads (PDF and general images)
    const handleFileUpload = async (event) => {
        const file = event.target.files[0];
        if (!file) return;

        if (!isTesseractReady) {
            setStatusMessage('‚ö†Ô∏è OCR engine se st√°le naƒç√≠t√°. Zkuste pros√≠m za chv√≠li.');
            return;
        }

        setIsLoading(true); // Start general loading for file processing
        setUploadedFileTextForApi(''); // Clear previous file content for API
        setInputText(''); // Clear manual input as a file is now being processed
        setOutput(''); // Clear previous output
        setStatusMessage('Zpracov√°v√°m nahran√Ω dokument. Chv√≠li to m≈Ø≈æe trvat.'); // Initial processing message

        try {
            if (file.type === 'application/pdf') {
                const reader = new FileReader();
                reader.onload = async () => {
                    let extractedFullText = '';
                    let specificErrorMessage = '';

                    try {
                        const loadingTask = pdfjsLib.getDocument({ data: reader.result });
                        const pdf = await loadingTask.promise;
                        for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
                            const page = await pdf.getPage(pageNum);
                            const content = await page.getTextContent();
                            extractedFullText += content.items.map((item) => item.str).join(' ') + '\n';
                        }
                    } catch (stdPdfErr) {
                        console.warn('PDF standard text extraction failed, attempting OCR:', stdPdfErr);
                        setStatusMessage('PDF neobsahuje ƒçiteln√Ω text, zkou≈°√≠m OCR...'); // Intermediate message

                        try {
                            const images = await pdfToImages(file);
                            if (!images || images.length === 0) {
                                throw new Error("Nepoda≈ôilo se p≈ôev√©st PDF na obr√°zky pro OCR.");
                            }
                            for (const imageBase64 of images) {
                                extractedFullText += await runOCR(imageBase64) + '\n';
                            }
                        } catch (ocrProcessErr) {
                            console.error('Error during PDF to Image conversion or OCR process:', ocrProcessErr);
                            specificErrorMessage = '‚ö†Ô∏è Chyba p≈ôi p≈ôevodu PDF na obr√°zky nebo p≈ôi OCR: ' + ocrProcessErr.message;
                            extractedFullText = '';
                        }
                    }

                    if (extractedFullText.trim().length > 10) {
                        setUploadedFileTextForApi(extractedFullText);
                        setStatusMessage('‚úÖ Dokument √∫spƒõ≈°nƒõ nahr√°n a zpracov√°n.');
                    } else {
                        setUploadedFileTextForApi('');
                        if (specificErrorMessage) {
                            setStatusMessage(specificErrorMessage);
                        } else if (statusMessage.includes('Chyba p≈ôi rozpozn√°v√°n√≠ textu (OCR)')) {
                            // runOCR already set a specific error, keep it.
                        } else {
                            setStatusMessage('‚ö†Ô∏è Z dokumentu se nepoda≈ôilo rozpoznat ≈æ√°dn√Ω text (nebo je p≈ô√≠li≈° kr√°tk√Ω).');
                        }
                    }
                    setIsLoading(false); // End loading
                };
                reader.readAsArrayBuffer(file);

            } else if (file.type.startsWith('image/')) {
                const base64 = await convertFileToBase64(file);
                const extractedText = await runOCR(base64);

                if (extractedText.trim().length > 10) {
                    setUploadedFileTextForApi(extractedText);
                    setStatusMessage('‚úÖ Obr√°zek √∫spƒõ≈°nƒõ nahr√°n a text rozpozn√°n.');
                } else {
                    setUploadedFileTextForApi('');
                    if (!statusMessage.includes('Chyba p≈ôi rozpozn√°v√°n√≠ textu (OCR)')) {
                        setStatusMessage('‚ö†Ô∏è Nerozpoznali jsme ƒçiteln√Ω text z obr√°zku (nebo je p≈ô√≠li≈° kr√°tk√Ω).');
                    }
                }
                setIsLoading(false);

            } else {
                setStatusMessage('‚ö†Ô∏è Nepodporovan√Ω typ souboru. Nahrajte PDF nebo obr√°zek.');
                setIsLoading(false);
            }
        } catch (outerError) {
            console.error('Chyba p≈ôi nahr√°v√°n√≠ souboru:', outerError);
            setUploadedFileTextForApi('');
            setStatusMessage('‚ö†Ô∏è Nepoda≈ôilo se naƒç√≠st soubor nebo do≈°lo k v√°≈æn√© chybƒõ.');
            setIsLoading(false);
        }
    };

    // Handler specifically for camera capture (mobile devices)
    const handleCameraCapture = async (event) => {
        const file = event.target.files[0];
        if (!file) return;

        if (!isTesseractReady) {
            setStatusMessage('‚ö†Ô∏è OCR engine se st√°le naƒç√≠t√°. Zkuste pros√≠m za chv√≠li.');
            return;
        }

        setIsLoading(true); // Start general loading for file processing
        setUploadedFileTextForApi('');
        setInputText(''); // Clear manual input
        setOutput('');
        setStatusMessage('Zpracov√°v√°m nahran√Ω dokument. Chv√≠li to m≈Ø≈æe trvat.'); // Initial processing message

        try {
            const base64 = await convertFileToBase64(file);
            const extractedText = await runOCR(base64);

            if (extractedText.trim().length > 10) {
                setUploadedFileTextForApi(extractedText);
                setStatusMessage('‚úÖ Foto z kamery √∫spƒõ≈°nƒõ nahr√°no a text rozpozn√°n.');
            } else {
                setUploadedFileTextForApi('');
                if (!statusMessage.includes('Chyba p≈ôi rozpozn√°v√°n√≠ textu (OCR)')) {
                    setStatusMessage("‚ö†Ô∏è Nerozpoznali jsme ƒçiteln√Ω text z fotografie (nebo je p≈ô√≠li≈° kr√°tk√Ω).");
                }
            }
        } catch (err) {
            console.error('Chyba p≈ôi naƒç√≠t√°n√≠ z kamery:', err);
            setUploadedFileTextForApi('');
            setStatusMessage('‚ö†Ô∏è Nepoda≈ôilo se naƒç√≠st fotografii.');
        } finally {
            setIsLoading(false);
        }
    };

    // Handles the submission of processed text to the API
    const handleSubmit = async () => {
        if (!selectedType) {
            setStatusMessage('‚ö†Ô∏è Vyberte, ƒçemu chcete rozumƒõt ‚Äì l√©ka≈ôskou zpr√°vu nebo rozbor krve.');
            return;
        }

        // Determine which text to send to the API: file content if available, else manual input
        const finalTextToSend = uploadedFileTextForApi || inputText;

        if (!finalTextToSend || finalTextToSend.trim().length === 0) {
            setStatusMessage('‚ö†Ô∏è Nezadal jsi ≈æ√°dn√Ω text ani nenahr√°l dokument.');
            return;
        }

        setOutput(''); // Clear previous output
        setStatusMessage('P≈ôekl√°d√°m do lidsk√© ≈ôeƒçi. M≈Ø≈æe to chv√≠li trvat.'); // Set translation specific message
        setIsLoading(true); // Start general loading for translation

        try {
            const prompt = selectedType === 'zprava'
                ? `üõ°Ô∏è Tento p≈ôeklad slou≈æ√≠ pouze k lep≈°√≠mu pochopen√≠ obsahu l√©ka≈ôsk√© zpr√°vy a nenahrazuje konzultaci s l√©ka≈ôem.

                    P≈ôelo≈æ n√°sleduj√≠c√≠ l√©ka≈ôskou zpr√°vu nebo zdravotn√≠ dokument (nap≈ô. v√Ωpis z vy≈°et≈ôen√≠, propou≈°tƒõc√≠ zpr√°vu, zpr√°vu od specialisty) do jednoduch√©, srozumiteln√© ƒçe≈°tiny vhodn√© pro bƒõ≈æn√©ho ƒçlovƒõka bez l√©ka≈ôsk√©ho vzdƒõl√°n√≠.

                    üîπ Dr≈æ se v√Ωhradnƒõ informac√≠ uveden√Ωch ve zpr√°vƒõ ‚Äì **nep≈ôid√°vej vlastn√≠ diagn√≥zy, rady ani vysvƒõtlen√≠ mimo text**.
                    üîπ P≈ôelo≈æ odborn√© pojmy nebo zkratky do bƒõ≈æn√©ho jazyka a p≈ôipoj struƒçn√© vysvƒõtlen√≠.
                    üîπ Pokud nƒõjak√© √∫daje chyb√≠, uveƒè ‚ÄûInformace chyb√≠‚Äú nebo ‚ÄûNen√≠ uvedeno‚Äú.
                    üîπ Pokud zpr√°va obsahuje d≈Øle≈æit√© n√°lezy (nap≈ô. n√°lezy, kter√© by mohly souviset se zdravotn√≠mi pot√≠≈æemi), m≈Ø≈æe≈° p≈ôidat upozornƒõn√≠, ≈æe by bylo vhodn√© obr√°tit se na l√©ka≈ôe.

                    üßæ V√Ωstup strukturovanƒõ rozdƒõl do n√°sleduj√≠c√≠ch ƒç√°st√≠:

                    üè• Oddƒõlen√≠ / specializace:
                    (nap≈ô. neurologie, urologie; pokud nen√≠ uvedeno, napi≈° ‚ÄûNen√≠ uvedeno‚Äú)

                    üìÑ Co se zjistilo:
                    (struƒçnƒõ popi≈° hlavn√≠ zji≈°tƒõn√≠ ze zpr√°vy, co bylo pozorov√°no)

                    üß™ Jak√° vy≈°et≈ôen√≠ probƒõhla:
                    (nap≈ô. ultrazvuk, krevn√≠ testy, RTG; pokud nejsou zm√≠nƒõny, napi≈° ‚ÄûNen√≠ uvedeno‚Äú)

                    üìã Shrnut√≠ l√©ka≈ôsk√©ho n√°lezu:
                    (p≈ôevypr√°vƒõj n√°lez jednodu≈°e, bez l√©ka≈ôsk√© terminologie, ale bez vkl√°d√°n√≠ domnƒõnek)

                    üß† Vysvƒõtlen√≠ kl√≠ƒçov√Ωch pojm≈Ø:
                    (p≈ôehled pou≈æit√Ωch odborn√Ωch term√≠n≈Ø a co znamenaj√≠, nap≈ô. ‚ÄûCRP ‚Äì z√°nƒõtliv√Ω ukazatel v krvi‚Äú)

                    ‚ö†Ô∏è Z√°vƒõrem:
                    (pokud zpr√°va obsahuje z√°vƒõr nebo doporuƒçen√≠, struƒçnƒõ je shr≈à; pokud ne, napi≈° ‚ÄûZ√°vƒõr nen√≠ uveden‚Äú. Pokud je nƒõco d≈Øle≈æit√©ho, m≈Ø≈æe≈° neutr√°lnƒõ napsat ‚ÄûV p≈ô√≠padƒõ nejasnost√≠ doporuƒçujeme konzultaci s l√©ka≈ôem‚Äú)

                    Na konec p≈ôipoj tuto pozn√°mku:

                    üõ°Ô∏è Tento v√Ωstup slou≈æ√≠ pouze k orientaci v obsahu l√©ka≈ôsk√© zpr√°vy. Nejedn√° se o l√©ka≈ôskou radu. Pro p≈ôesn√© informace nebo dal≈°√≠ postup kontaktujte sv√©ho l√©ka≈ôe.`

                : `üõ°Ô∏è Tento v√Ωstup slou≈æ√≠ pouze k lep≈°√≠mu pochopen√≠ v√Ωsledk≈Ø krevn√≠ho testu a nenahrazuje konzultaci s l√©ka≈ôem.

                    Vysvƒõtli n√°sleduj√≠c√≠ v√Ωsledky krevn√≠ho rozboru jednodu≈°e a p≈ôehlednƒõ. V√Ωstup m√° b√Ωt srozumiteln√Ω i pro bƒõ≈æn√©ho ƒçlovƒõka bez l√©ka≈ôsk√©ho vzdƒõl√°n√≠.

                    üîπ Dr≈æ se v√Ωhradnƒõ uveden√Ωch hodnot ‚Äì **nep≈ôid√°vej ≈æ√°dn√© diagn√≥zy ani n√°vrhy l√©ƒçby**.
                    üîπ U ka≈æd√©ho parametru uveƒè struƒçn√© vysvƒõtlen√≠, co znamen√°.
                    üîπ Pokud je k dispozici referenƒçn√≠ rozmez√≠, pou≈æij ho pro orientaƒçn√≠ urƒçen√≠, zda je hodnota ‚Äûv normƒõ‚Äú, ‚Äûm√≠rnƒõ mimo‚Äú nebo ‚Äûv√Ωraznƒõ mimo normu‚Äú.
                    üîπ Pokud referenƒçn√≠ hodnoty chyb√≠, vych√°zej ze standardn√≠ch rozmez√≠ podle pohlav√≠ a vƒõku, pokud jsou tyto √∫daje uvedeny. Jinak napi≈° ‚ÄûNen√≠ uvedeno‚Äú.
                    üîπ Pokud je hodnota v√Ωraznƒõ mimo bƒõ≈æn√© rozmez√≠, napi≈° neutr√°ln√≠ upozornƒõn√≠, ≈æe by bylo vhodn√© konzultovat l√©ka≈ôe.
                    üîπ Nepou≈æ√≠vej ≈æ√°dn√° alarmuj√≠c√≠ slova ‚Äì zachovej neutr√°ln√≠ a klidn√Ω t√≥n.

                    üßæ Struktura v√Ωstupu pro ka≈æd√Ω parametr:

                    **N√°zev parametru:**
                    (nap≈ô. Hemoglobin, Leukocyty ‚Äì uveƒè pln√Ω n√°zev i p≈ôeklad zkratky, pokud existuje)
                    **Namƒõ≈ôen√° hodnota:**
                    (nap≈ô. 136 g/l; pokud chyb√≠, napi≈° ‚ÄûNen√≠ uvedena‚Äú)
                    **Co to znamen√°:**
                    (1‚Äì2 vƒõty, co dan√Ω parametr v tƒõle dƒõl√°, proƒç se mƒõ≈ô√≠)
                    **Hodnota v normƒõ?:**
                    (napi≈° ‚Äûv normƒõ‚Äú, ‚Äûm√≠rnƒõ mimo normu‚Äú nebo ‚Äûv√Ωraznƒõ mimo normu‚Äú; p≈ôi posledn√≠m m≈Ø≈æe≈° dodat ‚ÄûDoporuƒçuje se konzultace s l√©ka≈ôem‚Äú)
                    üìå Zachovej po≈ôad√≠ parametr≈Ø tak, jak jsou ve vstupu, a seskup je logicky, pokud je to vhodn√© (nap≈ô. jatern√≠ testy, krevn√≠ obraz atd.).

                    Na z√°vƒõr p≈ôipoj pozn√°mku:

                    üõ°Ô∏è Tento v√Ωstup je urƒçen pouze pro informativn√≠ √∫ƒçely a nenahrazuje l√©ka≈ôskou konzultaci. V p≈ô√≠padƒõ nejasnost√≠ se obra≈•te na sv√©ho l√©ka≈ôe.`
                ;

            const response = await fetch('/api/translateGpt4o', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ prompt, text: finalTextToSend }),
            });

            const data = await response.json();
            setOutput(data.result || '‚ö†Ô∏è Odpovƒõƒè je pr√°zdn√°.');
            setStatusMessage('‚úÖ P≈ôeklad √∫spƒõ≈°nƒõ dokonƒçen.'); // Final success message for translation
        } catch (error) {
            console.error('Frontend error:', error);
            setOutput('‚ö†Ô∏è Do≈°lo k chybƒõ p≈ôi zpracov√°n√≠.');
            setStatusMessage('‚ö†Ô∏è Do≈°lo k chybƒõ p≈ôi zpracov√°n√≠ po≈æadavku na p≈ôeklad.');
        } finally {
            setIsLoading(false); // End loading
        }
    };

    // Clears all input and output fields
    const handleClear = () => {
        setInputText(''); // Clear manual input
        setUploadedFileTextForApi(''); // Clear file content for API
        setOutput('');
        setStatusMessage(''); // Clear any status messages
        setConsentChecked(false);
        setGdprChecked(false);
        setIsLoading(false);
        setSeconds(0);
        setSelectedType(null); // Reset selected type as well
        // setErrorMessage(null); // This line was commented out in previous versions
    };

    // Renders the structured output from the API response
    const renderStructuredOutput = () => {
        if (!output) return null;
        // Split output by specific emojis used in the prompt for structured display
        const sections = output.split(/(?=\ud83c\udfe6|\ud83c\udfe5|\ud83d\udc64|\ud83d\udcc4|\ud83e\uddea|\ud83d\udcdc|\ud83e\udde0|\u26a0\ufe0f)/);
        // Filter out empty strings from the split result
        const filteredSections = sections.filter(section => section.trim() !== '');

        return (
            <div className="bg-gray-50 border border-gray-200 p-6 rounded-lg shadow-md break-words whitespace-pre-wrap">
                {filteredSections.map((section, index) => {
                    // Determine if section starts with an emoji, then display as a strong heading
                    if (section.startsWith('üè•') || section.startsWith('üë§') || section.startsWith('üìÑ') || section.startsWith('üß™') || section.startsWith('üìã') || section.startsWith('üß†') || section.startsWith('‚ö†Ô∏è') || section.startsWith('üõ°Ô∏è')) {
                        return (
                            <h3 key={index} className="text-lg mt-4 mb-2 text-neutral-800">
                                {section.trim()}
                            </h3>
                        );
                    }
                    return <p key={index} className="mb-2 text-gray-700 text-base">{section.trim()}</p>;
                })}
            </div>
        );
    };

    // Helper to determine if the message is a "processing" message (not final success/error)
    const isProcessingMessage = (msg) => {
        return msg.includes('Zpracov√°v√°m') || msg.includes('P≈ôekl√°d√°m') || msg.includes('zkou≈°√≠m OCR') || msg.includes('Rozpozn√°v√°m text') || msg.includes('Naƒç√≠t√°m OCR engine') || msg.includes('Inicializuji OCR engine');
    };

    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex flex-col items-center p-4">
            <div className="w-full max-w-3xl bg-white p-8 rounded-xl shadow-2xl my-8">
                <h1 className="text-5xl font-extrabold text-center text-blue-800 mb-4 tracking-tight">L√©ka≈ô pro lidi</h1>
                <p className="mb-10 text-center text-gray-700 text-xl leading-relaxed">
                    L√©ka≈ôsk√© zpr√°vy jsou nƒõkdy o≈ô√≠≈°kem i pro samotn√© l√©ka≈ôe. <br />
                    Proto jsem vytvo≈ôil n√°stroj, kter√Ω v√°m je p≈ôelo≈æ√≠ do srozumiteln√© lidsk√© ≈ôeƒçi, ƒçlovƒõƒçiny.
                </p>

                {/* Jak to funguje? section */}
                <div className="bg-blue-50 border-l-4 border-blue-400 text-blue-900 p-5 rounded-lg shadow-inner text-base mb-10">
                    <p className="font-bold mb-3 text-lg">Jak to funguje?</p>
                    <ul className="list-disc list-inside space-y-2">
                        <li>Vyberte, zda se jedn√° o L√©ka≈ôskou zpr√°vu nebo Rozbor krve.</li>
                        <li>Vlo≈æte text z dokumentu do textov√©ho pole, nebo nahrajte PDF ƒçi fotografii.</li>
                        <li>Souhlaste s podm√≠nkami.</li>
                        <li>Kliknƒõte na "P≈ôelo≈æ do lidsk√© ≈ôeƒçi" a vyƒçkejte na p≈ôeklad.</li>
                    </ul>
                </div>

                {/* GOOGLE AD UNIT - Integrated more smoothly */}
                <div className="my-8 flex justify-center">
                    <ins className="adsbygoogle"
                        style={{ display: 'block', textAlign: 'center' }}
                        data-ad-layout="in-article"
                        data-ad-format="fluid"
                        data-ad-client="ca-pub-YOUR_AD_CLIENT_ID" // Replace with your AdSense Client ID
                        data-ad-slot="YOUR_AD_SLOT_ID"></ins> {/* Replace with your AdSense Ad Slot ID */}
                </div>

                {/* Section 1: Document type selection */}
                <div className="bg-gray-50 p-6 rounded-lg shadow-inner mb-8">
                    <p className="text-center text-gray-700 font-semibold text-lg mb-6">1. Vyberte typ dokumentu:</p>
                    <div className="flex flex-col sm:flex-row justify-center gap-4">
                        <button
                            className={`flex-1 px-6 py-3 rounded-xl shadow-md transition-all duration-200 ease-in-out transform hover:-translate-y-1 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 ${
                                selectedType === 'zprava' ? 'bg-blue-600 text-white font-bold' : 'bg-gray-200 hover:bg-gray-300 text-gray-700'
                            }`}
                            onClick={() => setSelectedType('zprava')}
                            disabled={isLoading}
                        >
                            <span className="text-xl mr-2">üìÑ</span> L√©ka≈ôsk√° zpr√°va
                        </button>
                        <button
                            className={`flex-1 px-6 py-3 rounded-xl shadow-md transition-all duration-200 ease-in-out transform hover:-translate-y-1 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 ${
                                selectedType === 'rozbor' ? 'bg-blue-600 text-white font-bold' : 'bg-gray-200 hover:bg-gray-300 text-gray-700'
                            }`}
                            onClick={() => setSelectedType('rozbor')}
                            disabled={isLoading}
                        >
                            <span className="text-xl mr-2">üíâ</span> Rozbor krve
                        </button>
                    </div>
                </div>

                {/* Section 2: Text input / upload buttons */}
                <div className="bg-gray-50 p-6 rounded-lg shadow-inner mb-8">
                    <p className="text-center text-gray-700 font-semibold text-lg mb-6">2. Vlo≈æte text nebo nahrajte dokument:</p>
                    {/* Textarea for manual input only */}
                    <textarea
                        placeholder={"Sem vlo≈æte text ruƒçnƒõ nebo nahrajte dokument pomoc√≠ tlaƒç√≠tek n√≠≈æe."}
                        className="p-4 border-2 border-dashed border-gray-300 rounded-lg bg-white shadow-sm resize-none w-full min-h-[160px] mb-6 focus:outline-none focus:border-blue-500 transition-colors"
                        rows={8}
                        value={inputText} // Only bind to inputText
                        onChange={(e) => {
                            setInputText(e.target.value);
                            setUploadedFileTextForApi(''); // Clear file content if user starts typing manually
                            setStatusMessage(''); // Clear any previous status message
                        }}
                        disabled={isLoading}
                    />

                    {/* Hidden file inputs */}
                    <input
                        type="file"
                        accept=".pdf,image/*"
                        onChange={handleFileUpload}
                        ref={fileUploadRef}
                        style={{ display: 'none' }}
                    />
                    <input
                        type="file"
                        accept="image/*"
                        capture="environment" // Suggests front or rear camera
                        onChange={handleCameraCapture}
                        ref={cameraCaptureRef}
                        style={{ display: 'none' }}
                    />

                    {/* Upload buttons */}
                    <div className="flex flex-col sm:flex-row gap-4">
                        <button
                            className="flex-1 bg-blue-500 text-white py-3 rounded-lg text-lg font-semibold hover:bg-blue-600 transition shadow-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
                            onClick={() => fileUploadRef.current.click()}
                            disabled={isLoading || !isTesseractReady} // Disable if Tesseract is not ready
                        >
                            <span className="mr-2">üìÅ</span> Nahr√°t dokument (PDF/Obr√°zek)
                        </button>
                        <button
                            className="flex-1 bg-blue-500 text-white py-3 rounded-lg text-lg font-semibold hover:bg-blue-600 transition shadow-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
                            onClick={() => cameraCaptureRef.current.click()}
                            disabled={isLoading || !isTesseractReady} // Disable if Tesseract is not ready
                        >
                            <span className="mr-2">üì∏</span> Vyfotit dokument mobilem
                        </button>
                    </div>
                </div>

                {/* Status message display (including loading animation for processing messages) */}
                {statusMessage && (
                    <div className={`p-4 rounded-lg mb-8 text-base font-medium flex items-center justify-center gap-2 ${
                        statusMessage.startsWith('‚úÖ') ? 'bg-green-100 text-green-800 border border-green-200' :
                        (statusMessage.startsWith('‚ö†Ô∏è') ? 'bg-red-100 text-red-800 border border-red-200' :
                        'bg-blue-100 text-blue-800 border border-blue-200') // General processing messages
                    }`}>
                        {(isLoading || (!isTesseractReady && statusMessage.includes('Naƒç√≠t√°m OCR engine'))) && isProcessingMessage(statusMessage) && (
                            <span className="animate-spin text-xl">üîÑ</span>
                        )}
                        <span>{statusMessage}</span>
                        {isLoading && isProcessingMessage(statusMessage) && (
                            <span className="ml-2">({seconds}s)</span>
                        )}
                    </div>
                )}

                {/* Section 3: Consent checkboxes */}
                <div className="bg-gray-50 p-6 rounded-lg shadow-inner mb-8">
                    <p className="text-center text-gray-700 font-semibold text-lg mb-6">3. Souhlas s podm√≠nkami:</p>
                    <div className="space-y-4">
                        <label className="flex items-center text-gray-700 text-base cursor-pointer">
                            <input
                                type="checkbox"
                                className="form-checkbox h-5 w-5 text-blue-600 rounded mr-3"
                                checked={consentChecked}
                                onChange={(e) => setConsentChecked(e.target.checked)}
                                disabled={isLoading}
                            />
                            <span className="leading-tight">Rozum√≠m, ≈æe se nejedn√° o profesion√°ln√≠ l√©ka≈ôskou radu.</span>
                        </label>
                        <label className="flex items-center text-gray-700 text-base cursor-pointer">
                            <input
                                type="checkbox"
                                className="form-checkbox h-5 w-5 text-blue-600 rounded mr-3"
                                checked={gdprChecked}
                                onChange={(e) => setGdprChecked(e.target.checked)}
                                disabled={isLoading}
                            />
                            <span className="leading-tight">Souhlas√≠m se zpracov√°n√≠m vlo≈æen√©ho dokumentu nebo textu. Data nejsou ukl√°d√°na.</span>
                        </label>
                    </div>
                </div>

                {/* Submit and Clear buttons */}
                <div className="flex flex-col sm:flex-row gap-4 mb-8">
                    <button
                        className={`flex-1 py-4 rounded-xl text-xl font-bold transition-all duration-200 ease-in-out transform hover:-translate-y-1 hover:shadow-lg focus:outline-none focus:ring-2 focus://focus:ring-blue-500 focus:ring-opacity-50 ${
                            selectedType && consentChecked && gdprChecked && (inputText.trim().length > 0 || uploadedFileTextForApi.trim().length > 0) && !isLoading
                                ? 'bg-blue-600 text-white hover:bg-blue-700'
                                : 'bg-gray-400 text-white cursor-not-allowed'
                        }`}
                        onClick={handleSubmit}
                        disabled={!selectedType || !consentChecked || !gdprChecked || (inputText.trim().length === 0 && uploadedFileTextForApi.trim().length === 0) || isLoading}
                    >
                        {isLoading && statusMessage.startsWith('P≈ôekl√°d√°m') ? (
                            <span className="flex items-center justify-center">
                                <span className="animate-spin rounded-full h-6 w-6 border-b-2 border-white mr-3"></span>
                                P≈ôekl√°d√°m...
                            </span>
                        ) : (
                            'P≈ôelo≈æ do lidsk√© ≈ôeƒçi'
                        )}
                    </button>

                    <button
                        className={`flex-1 py-4 rounded-xl text-xl font-bold transition-all duration-200 ease-in-out transform hover:-translate-y-1 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-opacity-50 ${
                            isLoading ? 'bg-gray-400 text-white cursor-not-allowed' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                        }`}
                        onClick={handleClear}
                        disabled={isLoading}
                    >
                        Vymazat v≈°e
                    </button>
                </div>


                {/* Output section */}
                {output && (
                    <div className="mt-12 border-t pt-8 border-gray-200">
                        <h2 className="text-3xl font-bold mb-6 text-blue-800 text-center">V√Ωsledek p≈ôekladu:</h2>
                        {renderStructuredOutput()}
                        <FeedbackForm />
                    </div>
                )}
            </div>
            <Footer />
        </div>
    );
}

export default Home;

export default Home;
