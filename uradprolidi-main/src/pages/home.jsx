import React, { useState, useEffect } from 'react';
import * as pdfjsLib from 'pdfjs-dist/build/pdf';
import pdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry';
import FeedbackForm from '../components/FeedbackForm';
import { Link } from 'react-router-dom';
import Footer from '../components/Footer';

pdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;

export default function Home() {
  const [inputText, setInputText] = useState('');
  const [output, setOutput] = useState('');
  const [pdfText, setPdfText] = useState('');
  const [uploadSuccess, setUploadSuccess] = useState(false);
  const [cameraUploadSuccess, setCameraUploadSuccess] = useState(false);
  const [consentChecked, setConsentChecked] = useState(false);
  const [gdprChecked, setGdprChecked] = useState(false);
  const [loading, setLoading] = useState(false);
  const [seconds, setSeconds] = useState(0);
  const [selectedType, setSelectedType] = useState(null);

  useEffect(() => {
    let timer;
    if (loading) {
      timer = setInterval(() => setSeconds((s) => s + 1), 1000);
    } else {
      clearInterval(timer);
      setSeconds(0);
    }
    return () => clearInterval(timer);
  }, [loading]);

 const handlePDFUpload = (event) => {
  const file = event.target.files[0];
  if (!file) return;

  const isPDF = file.type === 'application/pdf';
  const isImage = file.type.startsWith('image/');

  if (isPDF) {
    const reader = new FileReader();
    reader.onload = async () => {
      try {
        const loadingTask = pdfjsLib.getDocument({ data: new Uint8Array(reader.result) });
        const pdf = await loadingTask.promise;
        let fullText = '';

        for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
          const page = await pdf.getPage(pageNum);
          const content = await page.getTextContent();
          fullText += content.items.map((item) => item.str).join(' ') + '\n';
        }

        if (fullText.trim().length > 10) {
          setPdfText(fullText);
        }
        setUploadSuccess(true);

      } catch (error) {
        console.error("Chyba p≈ôi zpracov√°n√≠ PDF:", error);
        alert('‚ö†Ô∏è Chyba p≈ôi ƒçten√≠ PDF. Ujistƒõte se, ≈æe soubor je ƒçiteln√Ω.');
      }
    };
    reader.readAsArrayBuffer(file);
  }

    else if (isImage) {
      const reader = new FileReader();
      reader.onload = async () => {
        try {
          const imageBase64 = reader.result;
          setInputText(imageBase64); // This triggers GPT-4 Vision
          setUploadSuccess(true);
        } catch (err) {
          console.error('Chyba p≈ôi naƒç√≠t√°n√≠ obr√°zku:', err);
          alert('‚ö†Ô∏è Nepoda≈ôilo se naƒç√≠st obr√°zek. Zkuste jin√Ω soubor.');
        }
      };
      reader.readAsDataURL(file);
    }
   };

  const handleCameraCapture = () => {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*';
    input.capture = 'environment';
    input.style.display = 'none';

    input.addEventListener('change', async (event) => {
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onloadend = () => {
          setInputText(reader.result);
          setCameraUploadSuccess(true);
          setUploadSuccess(true);
        };
        reader.readAsDataURL(file);
      }
    });

    document.body.appendChild(input);
    input.click();
    document.body.removeChild(input);
  };

    const handleSubmit = async () => {
        if (!selectedType) {
          alert('‚ö†Ô∏è Vyberte, ƒçemu chcete rozumƒõt ‚Äì l√©ka≈ôskou zpr√°vu nebo rozbor krve.');
          return;
        }
      
        const finalText = inputText || pdfText;
      
        if (!finalText || finalText.trim().length < 5) {
          alert('‚ö†Ô∏è Nezadal jsi ≈æ√°dn√Ω text ani nenahr√°l dokument.');
          return;
        }
      
        setLoading(true);
        setOutput('');
      
        try {
          let prompt = '';
          if (selectedType === 'zprava') {
            prompt = `üõ°Ô∏è Tento p≈ôeklad slou≈æ√≠ pouze k lep≈°√≠mu pochopen√≠ obsahu l√©ka≈ôsk√© zpr√°vy a nenahrazuje konzultaci s l√©ka≈ôem.

                      P≈ôelo≈æ n√°sleduj√≠c√≠ l√©ka≈ôskou zpr√°vu nebo zdravotn√≠ dokument (nap≈ô. v√Ωpis z vy≈°et≈ôen√≠, propou≈°tƒõc√≠ zpr√°vu, zpr√°vu od specialisty) do jednoduch√©, srozumiteln√© ƒçe≈°tiny vhodn√© pro bƒõ≈æn√©ho ƒçlovƒõka bez l√©ka≈ôsk√©ho vzdƒõl√°n√≠.
                      
                      üîπ Dr≈æ se v√Ωhradnƒõ informac√≠ uveden√Ωch ve zpr√°vƒõ ‚Äì **nep≈ôid√°vej vlastn√≠ diagn√≥zy, rady ani vysvƒõtlen√≠ mimo text**.
                      üîπ P≈ôelo≈æ odborn√© pojmy nebo zkratky do bƒõ≈æn√©ho jazyka a p≈ôipoj struƒçn√© vysvƒõtlen√≠.
                      üîπ Pokud nƒõjak√© √∫daje chyb√≠, uveƒè ‚ÄûInformace chyb√≠‚Äú nebo ‚ÄûNen√≠ uvedeno‚Äú.
                      üîπ Pokud zpr√°va obsahuje d≈Øle≈æit√© n√°lezy (nap≈ô. n√°lezy, kter√© by mohly souviset se zdravotn√≠mi pot√≠≈æemi), m≈Ø≈æe≈° p≈ôidat upozornƒõn√≠, ≈æe by bylo vhodn√© obr√°tit se na l√©ka≈ôe.
                      
                      üßæ V√Ωstup strukturovanƒõ rozdƒõl do n√°sleduj√≠c√≠ch ƒç√°st√≠:
                      
                      **üè• Oddƒõlen√≠ / specializace:**  
                      (nap≈ô. neurologie, urologie; pokud nen√≠ uvedeno, napi≈° ‚ÄûNen√≠ uvedeno‚Äú)
                      
                      **üë§ Kdo je pacient:**  
                      (vƒõk, pohlav√≠, d≈Øvod n√°v≈°tƒõvy ‚Äì pokud nen√≠ uvedeno, napi≈° ‚ÄûInformace chyb√≠‚Äú)
                      
                      **üìÑ Co se zjistilo:**  
                      (struƒçnƒõ popi≈° hlavn√≠ zji≈°tƒõn√≠ ze zpr√°vy, co bylo pozorov√°no)
                      
                      **üß™ Jak√° vy≈°et≈ôen√≠ probƒõhla:**  
                      (nap≈ô. ultrazvuk, krevn√≠ testy, RTG; pokud nejsou zm√≠nƒõny, napi≈° ‚ÄûNen√≠ uvedeno‚Äú)
                      
                      **üìã Shrnut√≠ l√©ka≈ôsk√©ho n√°lezu:**  
                      (p≈ôevypr√°vƒõj n√°lez jednodu≈°e, bez l√©ka≈ôsk√© terminologie, ale bez vkl√°d√°n√≠ domnƒõnek)
                      
                      **üß† Vysvƒõtlen√≠ kl√≠ƒçov√Ωch pojm≈Ø:**  
                      (p≈ôehled pou≈æit√Ωch odborn√Ωch term√≠n≈Ø a co znamenaj√≠, nap≈ô. ‚ÄûCRP ‚Äì z√°nƒõtliv√Ω ukazatel v krvi‚Äú)
                      
                      **‚ö†Ô∏è Z√°vƒõrem:**  
                      (pokud zpr√°va obsahuje z√°vƒõr nebo doporuƒçen√≠, struƒçnƒõ je shr≈à; pokud ne, napi≈° ‚ÄûZ√°vƒõr nen√≠ uveden‚Äú. Pokud je nƒõco d≈Øle≈æit√©ho, m≈Ø≈æe≈° neutr√°lnƒõ napsat ‚ÄûV p≈ô√≠padƒõ nejasnost√≠ doporuƒçujeme konzultaci s l√©ka≈ôem‚Äú)
                      
                      Na konec p≈ôipoj tuto pozn√°mku:
                      
                      üõ°Ô∏è Tento v√Ωstup slou≈æ√≠ pouze k orientaci v obsahu l√©ka≈ôsk√© zpr√°vy. Nejedn√° se o l√©ka≈ôskou radu. Pro p≈ôesn√© informace nebo dal≈°√≠ postup kontaktujte sv√©ho l√©ka≈ôe.
                    "`;
          } else if (selectedType === 'rozbor') {
            prompt = `üõ°Ô∏è Tento v√Ωstup slou≈æ√≠ pouze k lep≈°√≠mu pochopen√≠ v√Ωsledk≈Ø krevn√≠ho testu a nenahrazuje konzultaci s l√©ka≈ôem.

                      Vysvƒõtli n√°sleduj√≠c√≠ v√Ωsledky krevn√≠ho rozboru jednodu≈°e a p≈ôehlednƒõ. V√Ωstup m√° b√Ωt srozumiteln√Ω i pro bƒõ≈æn√©ho ƒçlovƒõka bez l√©ka≈ôsk√©ho vzdƒõl√°n√≠.
                      
                      üîπ Dr≈æ se v√Ωhradnƒõ uveden√Ωch hodnot ‚Äì **nep≈ôid√°vej ≈æ√°dn√© diagn√≥zy ani n√°vrhy l√©ƒçby**.  
                      üîπ U ka≈æd√©ho parametru uveƒè struƒçn√© vysvƒõtlen√≠, co znamen√°.  
                      üîπ Pokud je k dispozici referenƒçn√≠ rozmez√≠, pou≈æij ho pro orientaƒçn√≠ urƒçen√≠, zda je hodnota ‚Äûv normƒõ‚Äú, ‚Äûm√≠rnƒõ mimo‚Äú nebo ‚Äûv√Ωraznƒõ mimo normu‚Äú.  
                      üîπ Pokud referenƒçn√≠ hodnoty chyb√≠, vych√°zej ze standardn√≠ch rozmez√≠ podle pohlav√≠ a vƒõku, pokud jsou tyto √∫daje uvedeny. Jinak napi≈° ‚ÄûNen√≠ uvedeno‚Äú.  
                      üîπ Pokud je hodnota v√Ωraznƒõ mimo bƒõ≈æn√© rozmez√≠, napi≈° neutr√°ln√≠ upozornƒõn√≠, ≈æe by bylo vhodn√© konzultovat l√©ka≈ôe.  
                      üîπ Nepou≈æ√≠vej ≈æ√°dn√° alarmuj√≠c√≠ slova ‚Äì zachovej neutr√°ln√≠ a klidn√Ω t√≥n.
                      
                      üßæ Struktura v√Ωstupu pro ka≈æd√Ω parametr:
                      
                      **N√°zev parametru:**  
                      (nap≈ô. Hemoglobin, Leukocyty ‚Äì uveƒè pln√Ω n√°zev i p≈ôeklad zkratky, pokud existuje)
                      
                      **Namƒõ≈ôen√° hodnota:**  
                      (nap≈ô. 136 g/l; pokud chyb√≠, napi≈° ‚ÄûNen√≠ uvedena‚Äú)
                      
                      **Co to znamen√°:**  
                      (1‚Äì2 vƒõty, co dan√Ω parametr v tƒõle dƒõl√°, proƒç se mƒõ≈ô√≠)
                      
                      **Hodnota v normƒõ?:**  
                      (napi≈° ‚Äûv normƒõ‚Äú, ‚Äûm√≠rnƒõ mimo normu‚Äú nebo ‚Äûv√Ωraznƒõ mimo normu‚Äú; p≈ôi posledn√≠m m≈Ø≈æe≈° dodat ‚ÄûDoporuƒçuje se konzultace s l√©ka≈ôem‚Äú)
                      
                      üìå Zachovej po≈ôad√≠ parametr≈Ø tak, jak jsou ve vstupu, a seskup je logicky, pokud je to vhodn√© (nap≈ô. jatern√≠ testy, krevn√≠ obraz atd.).
                      
                      Na z√°vƒõr p≈ôipoj pozn√°mku:
                      
                      üõ°Ô∏è Tento v√Ωstup je urƒçen pouze pro informativn√≠ √∫ƒçely a nenahrazuje l√©ka≈ôskou konzultaci. V p≈ô√≠padƒõ nejasnost√≠ se obra≈•te na sv√©ho l√©ka≈ôe.
                      `;
          }
      
          const response = await fetch('/api/translateVision', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              imageUrl: finalText,
              prompt: prompt,
            }),
          });

          const data = await response.json();
          setOutput(data.result || '‚ö†Ô∏è Odpovƒõƒè je pr√°zdn√°.');
        } catch (error) {
          console.error(error);
          setOutput('‚ö†Ô∏è Do≈°lo k chybƒõ p≈ôi zpracov√°n√≠. Ujistƒõte se, ≈æe dokument je ƒçiteln√Ω.');
        } finally {
          setLoading(false);
        }
      };

  const handleClear = () => {
    setInputText('');
    setOutput('');
    setPdfText('');
    setUploadSuccess(false);
    setCameraUploadSuccess(false);
    setConsentChecked(false);
    setGdprChecked(false);
    setLoading(false);
    setSeconds(0);
  };

  const renderStructuredOutput = () => {
    if (!output) return null;
    const sections = output.split(/(?=\ud83c\udfe6|\ud83d\udc64|\ud83c\udd94|\ud83d\udcec|\ud83e\uddfe|\ud83d\udcc8|\ud83d\udccc|\ud83d\udce3|\ud83d\udccc)/g);
    return (
      <div className="bg-white border rounded shadow p-4 mb-4 whitespace-pre-wrap text-gray-800">
        {sections.map((section, index) => (
          <div key={index} className="mb-3">{section.trim()}</div>
        ))}
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col justify-between">
      <main className="p-6 font-sans flex-grow flex items-center justify-center">
        <div className="max-w-2xl w-full bg-white rounded-lg shadow-md p-8">
          <h1 className="text-4xl font-bold mb-2 text-center text-gray-900">L√©ka≈ô pro lidi</h1>

              <p className="mb-4 text-center text-gray-700 text-lg">
                L√©ka≈ôsk√© zpr√°vy jsou nƒõkdy o≈ô√≠≈°kem i pro samotn√© l√©ka≈ôe. <br />
                Proto jsem vytvo≈ôil n√°stroj, kter√Ω v√°m je p≈ôelo≈æ√≠ do srozumiteln√© lidsk√© ≈ôeƒçi, ƒçlovƒõƒçiny.
              </p>
              
              <div className="bg-blue-50 border-l-4 border-blue-400 text-blue-900 p-4 rounded shadow text-sm mb-6">
                <p className="font-semibold mb-2">Jak to funguje?</p>
                <ol className="list-decimal ml-6 space-y-1">
                  <li>Vyberte, co chcete p≈ôelo≈æit ‚Äì l√©ka≈ôskou zpr√°vu nebo rozbor krve.</li>
                  <li>Vlo≈æte text, nebo nahrajte dokument / fotku z mobilu.</li>
                  <li>Za p√°r sekund obdr≈æ√≠te srozumiteln√Ω v√Ωklad, kter√©mu porozum√≠ ka≈æd√Ω.</li>
                </ol>
              </div>

              <div className="flex justify-center gap-4 mb-6">
                <button
                  className={`px-4 py-2 rounded ${selectedType === 'zprava' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
                  onClick={() => setSelectedType('zprava')}
                >
                  üìÑ L√©ka≈ôsk√° zpr√°va
                </button>
                <button
                  className={`px-4 py-2 rounded ${selectedType === 'rozbor' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
                  onClick={() => setSelectedType('rozbor')}
                >
                  üíâ Rozbor krve
                </button>
              </div>


          <textarea
            placeholder="Sem vlo≈æte text..."
            className="p-4 border border-gray-300 rounded bg-white shadow resize-none w-full mb-4"
            rows={8}
            value={inputText.startsWith('data:image/') ? '' : inputText}
            onChange={(e) => setInputText(e.target.value)}
          />

          <input type="file" accept=".pdf,.jpg,.jpeg,.png" onChange={handlePDFUpload} className="mb-4" />
          {uploadSuccess && <span className="text-green-600 text-xl">‚úÖ</span>}

          <button
            type="button"
            className="bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded transition mb-4"
            onClick={handleCameraCapture}
          >
            {cameraUploadSuccess ? '‚úÖ Spr√°vnƒõ nahr√°no' : 'üì∑ Vyfotit dokument mobilem'}
          </button>

          <div className="bg-gray-50 rounded border p-4 mb-6 text-sm text-gray-700 space-y-2">
            <label className="block">
              <input type="checkbox" className="mr-2" checked={consentChecked} onChange={(e) => setConsentChecked(e.target.checked)} />
              Rozum√≠m, ≈æe v√Ωstup nen√≠ profesion√°ln√≠ l√©ka≈ôsk√° rada.
            </label>
            <label className="block">
              <input type="checkbox" className="mr-2" checked={gdprChecked} onChange={(e) => setGdprChecked(e.target.checked)} />
              Souhlas√≠m se zpracov√°n√≠m dat.
            </label>
          </div>

          <div className="flex gap-4 mb-4">
            
            {(uploadSuccess || cameraUploadSuccess) && !inputText && !pdfText && (
              <p className="text-sm text-yellow-700 mb-2 text-center">‚è≥ Vyƒçkejte p√°r vte≈ôin, ne≈æ tlaƒç√≠tko zmodr√°‚Ä¶</p>
            )}

            <button
              className={`flex-1 py-3 rounded-lg text-lg font-semibold transition shadow ${
                consentChecked && gdprChecked && (inputText || pdfText)
                  ? 'bg-blue-600 text-white hover:bg-blue-700'
                  : 'bg-gray-400 text-white cursor-not-allowed'
              }`}
              onClick={handleSubmit}
              disabled={!consentChecked || !gdprChecked || (!inputText && !pdfText)}
            >
              P≈ôelo≈æ do lidsk√© ≈ôeƒçi
            </button>

            <button
              className="flex-1 bg-gray-300 text-gray-800 py-3 rounded-lg text-lg font-semibold hover:bg-gray-400 transition shadow"
              onClick={handleClear}
            >
              Vymazat v≈°e
            </button>
          </div>

          {loading && (
            <div className="flex flex-col items-center text-blue-600 text-sm mt-4">
              <p className="mb-1">‚è≥ P≈ôeklad m≈Ø≈æe trvat a≈æ 60 vte≈ôin. D√≠ky za trpƒõlivost.</p>
              <div className="flex items-center gap-2">
                <span className="animate-spin">üîÑ</span>
                <span>Zpracov√°v√°m... ({seconds}s)</span>
              </div>
            </div>
          )}

          {output && (
            <div className="mt-10">
              <h2 className="text-2xl font-semibold mb-4 text-gray-800">V√Ωstup:</h2>
              {renderStructuredOutput()}
              <FeedbackForm />
            </div>
          )}
        </div>
      </main>

     <Footer />
    </div>
  );
}
